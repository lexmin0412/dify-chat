# React App 容器化部署方案
# 多阶段构建：1. 构建子包 2. 构建 React 应用 3. 运行时环境
#
# 优化构建命令：
# docker build -f Dockerfile_react_app --dockerignore-file .dockerignore_react_app -t dify-chat-app-react:latest .

# ================================
# 阶段 1: 基础环境和依赖安装
# ================================
FROM node:22.5.1-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装 pnpm
RUN npm install -g pnpm@10.8.1

# 复制 package.json 和 pnpm 配置文件（优化缓存层）
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# 复制所有子包的 package.json 文件（用于依赖安装）
COPY packages/api/package.json ./packages/api/
COPY packages/components/package.json ./packages/components/
COPY packages/core/package.json ./packages/core/
COPY packages/helpers/package.json ./packages/helpers/
COPY packages/theme/package.json ./packages/theme/
COPY packages/react-app/package.json ./packages/react-app/

# 安装所有依赖
RUN pnpm install

# 复制子包源码（除了 react-app）
COPY packages/api ./packages/api
COPY packages/components ./packages/components
COPY packages/core ./packages/core
COPY packages/helpers ./packages/helpers
COPY packages/theme ./packages/theme
# components 子包有依赖到 react-app 的 tailwind.config.ts，后续优化
COPY packages/react-app ./packages/react-app

# 复制构建配置文件
COPY tsconfig.prod.json ./
COPY packages/*/tsconfig.json ./packages/*/

# 构建所有子包
RUN pnpm build:pkgs

# 设置环境变量（可在构建时通过 --build-arg 传入）
ARG PUBLIC_DEBUG_MODE=false
ARG PUBLIC_APP_API_BASE=http://localhost:5300/api/client
ARG PUBLIC_DIFY_PROXY_API_BASE=http://localhost:5300/api/client/dify

ENV PUBLIC_DEBUG_MODE=${PUBLIC_DEBUG_MODE}
ENV PUBLIC_APP_API_BASE=${PUBLIC_APP_API_BASE}
ENV PUBLIC_DIFY_PROXY_API_BASE=${PUBLIC_DIFY_PROXY_API_BASE}

# 构建 React 应用
RUN pnpm --filter dify-chat-app-react build

# ================================
# 阶段 4: 运行时环境 (Nginx) - 优化版
# ================================
FROM nginx:latest AS runtime

# 复制 nginx 配置模板
COPY packages/react-app/docker/nginx.conf.template /etc/nginx/conf.d/default.conf.template

# 复制构建产物到 nginx 静态文件目录（优化权限）
COPY --from=builder /app/packages/react-app/dist /usr/share/nginx/html/dify-chat

# 暴露端口
EXPOSE 80

# 创建启动脚本
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'echo "启动运行时配置处理..."' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# 设置默认环境变量' >> /docker-entrypoint.sh && \
    echo 'export PUBLIC_DEBUG_MODE=${PUBLIC_DEBUG_MODE:-false}' >> /docker-entrypoint.sh && \
    echo 'export PUBLIC_APP_API_BASE=${PUBLIC_APP_API_BASE:-http://localhost:5300/api/client}' >> /docker-entrypoint.sh && \
    echo 'export PUBLIC_DIFY_PROXY_API_BASE=${PUBLIC_DIFY_PROXY_API_BASE:-http://localhost:5300/api/client/dify}' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# 显示当前配置' >> /docker-entrypoint.sh && \
    echo 'echo "运行时配置:"' >> /docker-entrypoint.sh && \
    echo 'echo "  PUBLIC_DEBUG_MODE: $PUBLIC_DEBUG_MODE"' >> /docker-entrypoint.sh && \
    echo 'echo "  PUBLIC_APP_API_BASE: $PUBLIC_APP_API_BASE"' >> /docker-entrypoint.sh && \
    echo 'echo "  PUBLIC_DIFY_PROXY_API_BASE: $PUBLIC_DIFY_PROXY_API_BASE"' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# 使用 envsubst 预处理 nginx 配置文件' >> /docker-entrypoint.sh && \
    echo 'envsubst "\${PUBLIC_DEBUG_MODE} \${PUBLIC_APP_API_BASE} \${PUBLIC_DIFY_PROXY_API_BASE}" < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.sh && \
    echo 'echo "Nginx 配置文件已生成"' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# 启动 nginx' >> /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# 启动 nginx
ENTRYPOINT ["/docker-entrypoint.sh"]

# ================================
# 构建说明和使用指南
# ================================
#
# 基础构建命令：
# docker build -f Dockerfile_react_app -t dify-chat-app-react:latest .
#
# 优化构建命令（推荐）：
# docker build -f Dockerfile_react_app --dockerignore-file .dockerignore_react_app -t dify-chat-app-react:latest .
#
# 带环境变量构建：
# docker build -f Dockerfile_react_app \
#   --build-arg PUBLIC_DEBUG_MODE=true \
#   --build-arg PUBLIC_APP_API_BASE=https://api.example.com \
#   --build-arg PUBLIC_DIFY_PROXY_API_BASE=https://dify.example.com \
#   -t dify-chat-app-react:latest .
#
# 使用 BuildKit 缓存优化构建：
# DOCKER_BUILDKIT=1 docker build -f Dockerfile_react_app \
#   --dockerignore-file .dockerignore_react_app \
#   --cache-from=type=local,src=/tmp/.buildx-cache \
#   --cache-to=type=local,dest=/tmp/.buildx-cache \
#   -t dify-chat-app-react:latest .
#
# 运行容器：
# docker run -d -p 5200:80 --name dify-chat-app-react dify-chat-app-react:latest
#
# 带环境变量运行：
# docker run -d -p 5200:80 \
#   -e PUBLIC_DEBUG_MODE=false \
#   -e PUBLIC_APP_API_BASE=/api \
#   --name dify-chat-app-react dify-chat-app-react:latest
#
# 访问应用：
# http://localhost:5200/dify-chat/
#
# ================================
# 镜像优化特性
# ================================
# 1. 多阶段构建，最小化最终镜像大小
# 2. 使用 Alpine Linux 基础镜像
# 3. 专用 .dockerignore 文件减少构建上下文
# 4. 静态文件压缩和缓存策略
